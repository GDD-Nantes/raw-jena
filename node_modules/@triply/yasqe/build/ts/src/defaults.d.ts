import { default as Yasqe, PlainRequestConfig } from "./";
export default function get(): {
    requestConfig: PlainRequestConfig;
    value?: any;
    mode: string;
    theme?: string;
    indentUnit?: number;
    smartIndent?: boolean;
    tabSize?: number;
    indentWithTabs?: boolean;
    electricChars?: boolean;
    rtlMoveVisually?: boolean;
    keyMap?: string;
    extraKeys?: string | import("codemirror").KeyMap;
    lineWrapping?: boolean;
    lineNumbers?: boolean;
    firstLineNumber?: number;
    lineNumberFormatter?: (line: number) => string;
    gutters?: string[];
    foldGutter: any;
    fixedGutter?: boolean;
    scrollbarStyle?: string;
    coverGutterNextToScrollbar?: boolean;
    inputStyle?: import("codemirror").InputStyle;
    readOnly?: any;
    screenReaderLabel?: string;
    showCursorWhenSelecting?: boolean;
    lineWiseCopyCut?: boolean;
    pasteLinesPerSelection?: boolean;
    selectionsMayTouch?: boolean;
    undoDepth?: number;
    historyEventDelay?: number;
    tabindex?: number;
    autofocus?: boolean;
    dragDrop?: boolean;
    allowDropFileTypes?: string[];
    onDragEvent?: (instance: import("codemirror").Editor, event: DragEvent) => boolean;
    onKeyEvent?: (instance: import("codemirror").Editor, event: KeyboardEvent) => boolean;
    cursorBlinkRate?: number;
    cursorScrollMargin?: number;
    cursorHeight?: number;
    resetSelectionOnContextMenu?: boolean;
    workTime?: number;
    workDelay?: number;
    pollInterval?: number;
    flattenSpans?: boolean;
    addModeClass?: boolean;
    maxHighlightLength?: number;
    viewportMargin?: number;
    spellcheck?: boolean;
    autocorrect?: boolean;
    autocapitalize?: boolean;
    lint?: boolean | import("codemirror").LintStateOptions | import("codemirror").Linter | import("codemirror").AsyncLinter;
    collapsePrefixesOnLoad: boolean;
    syntaxErrorCheck: boolean;
    createShareableLink: (yasqe: Yasqe) => string;
    createShortLink: (yasqe: Yasqe, longLink: string) => Promise<string>;
    consumeShareLink: (yasqe: Yasqe) => void;
    persistenceId: string | ((yasqe: Yasqe) => string);
    persistencyExpire: number;
    showQueryButton: boolean;
    pluginButtons: () => HTMLElement | HTMLElement[];
    highlightSelectionMatches: {
        showToken?: RegExp;
        annotateScrollbar?: boolean;
    };
    tabMode: string;
    matchBrackets: boolean;
    autocompleters: string[];
    hintConfig: Partial<import("./").HintConfig>;
    resizeable: boolean;
    editorHeight: string;
    queryingDisabled: string;
    prefixCcApi: string;
};
