{"version":3,"file":"column-resizer.js","mappings":"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","sources":["webpack://ColumnResizer/webpack/universalModuleDefinition","webpack://ColumnResizer/./node_modules/string-hash/index.js","webpack://ColumnResizer/webpack/bootstrap","webpack://ColumnResizer/webpack/runtime/compat get default export","webpack://ColumnResizer/webpack/runtime/define property getters","webpack://ColumnResizer/webpack/runtime/hasOwnProperty shorthand","webpack://ColumnResizer/webpack/runtime/make namespace object","webpack://ColumnResizer/./src/ColumnResizer.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ColumnResizer\"] = factory();\n\telse\n\t\troot[\"ColumnResizer\"] = factory();\n})(this, () => {\nreturn ","\"use strict\";\n\nfunction hash(str) {\n  var hash = 5381,\n      i    = str.length;\n\n  while(i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n\n  /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */\n  return hash >>> 0;\n}\n\nmodule.exports = hash;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Created by jjglyn on 12/19/16.\n */\nimport stringHash from 'string-hash';\n\nconst counter = (() => {\n    let count = 0;\n    return () => {\n        return count++;\n    };\n})();\n\nexport default class ColumnResizer {\n    ID = 'id';\n    PX = 'px';\n    RESIZABLE = 'grip-resizable';\n    FLEX = 'grip-flex';\n    legacyIE = navigator.userAgent.indexOf('Trident/4.0') > 0;\n\n    /**\n     *\n     * @param {HTMLTableElement} tb\n     * @param {Object} options\n     */\n    constructor(tb, options = {}) {\n        try {\n            this.store = sessionStorage;\n        } catch (e) {\n            this.store = {};\n        }\n        this.grip = null;\n        this.tb = tb;\n        window.addEventListener('resize', this.onResize);\n        // Polyfill for IE\n        if (!Element.prototype.matches) {\n            Element.prototype.matches = Element.prototype.msMatchesSelector;\n        }\n        this.init(options);\n    }\n\n    /**\n     * Reinitialize the object with options.\n     * @param {Object} options\n     * @returns {Object} previous options object if any\n     */\n    reset = options => {\n        return this.init(options);\n    };\n\n    /**\n     * Remove column resizing properties from the table then re-apply them\n     */\n    onResize = () => {\n        const t = this.tb;\n        t.classList.remove(this.RESIZABLE);\n        if (t.opt.fixed) {\n            t.tableWidth = Number(window.getComputedStyle(t).width.replace(/px/, '')).valueOf();\n            let mw = 0;\n            for (let i = 0; i < t.columnCnt; i++) {\n                mw += t.columns[i].w;\n            }\n            for (let i = 0; i < t.columnCnt; i++) {\n                t.columns[i].style.width = Math.round(1000 * t.columns[i].w / mw) / 10 + '%';\n                t.columns[i].locked = true;\n                t.opt.currentWidths[i] = \n                    Number(window.getComputedStyle(t.columns[i])\n                        .width.replace(/px/, '')).valueOf();\n            }\n        } else {\n            this.applyBounds();\n            if (t.opt.resizeMode === 'flex' && t.opt.serialize) {\n                this.serializeStore();\n            }\n        }\n        t.classList.add(this.RESIZABLE);\n        this.syncGrips();\n    };\n\n    /**\n     * Event handler fired when the grip's dragging is about to start. Its main goal is to set up events\n     * and store some values used while dragging.\n     * @param {UIEvent} e - grip's mousedown/touchstart event\n     */\n    onGripMouseDown = (e) => {\n        const o = e.target.parentNode.data;\n        const t = this.tb;\n        const g = t.grips[o.i];\n        const oe = e.touches;\n        g.ox = oe ? oe[0].pageX : e.pageX;\n        g.l = g.offsetLeft;\n        g.x = g.l;\n\n        this.createStyle(document.querySelector('head'), '*{cursor:' + t.opt.dragCursor + '!important}');\n        document.addEventListener('touchmove', this.onGripDrag);\n        document.addEventListener('mousemove', this.onGripDrag);\n        document.addEventListener('touchend', this.onGripDragOver);\n        document.addEventListener('mouseup', this.onGripDragOver);\n        g.classList.add(t.opt.draggingClass); \t//add the dragging class (to allow some visual feedback)\n        this.grip = g;\n        if (t.columns[o.i].locked) { \t//if the column is locked (after browser resize), then c.w must be updated\n            for (let i = 0, c; i < t.columnCnt; i++) {\n                c = t.columns[i];\n                c.locked = false;\n                c.w = Number(window.getComputedStyle(c).width.replace(/px/, '')).valueOf();\n            }\n        }\n        e.preventDefault(); //prevent text selection\n    };\n\n    /**\n     * Event handler used while dragging a grip. It checks if the next grip's position is valid and updates it.\n     * @param {UIEvent} e - mousemove/touchmove event bound to the window object\n     */\n    onGripDrag = (e) => {\n        const grip = this.grip;\n        if (!grip) {\n            return;\n        }\n        const t = grip.t;\n        const oe = e.touches;\n        const ox = oe ? oe[0].pageX : e.pageX;\n        let x = ox - grip.ox + grip.l;\n        const mw = t.opt.minWidth;\n        const i = grip.i;\n        const l = t.cellSpace * 1.5 + mw + t.borderSpace;\n        const last = i === t.columnCnt - 1;\n        const min = i ? t.grips[i - 1].offsetLeft + t.cellSpace + mw : l;\n        const max = t.opt.fixed ? i === t.columnCnt - 1 ? t.tableWidth - l : t.grips[i + 1].offsetLeft - t.cellSpace - mw : Infinity;\n        x = Math.max(min, Math.min(max, x));\n        grip.x = x;\n        grip.style.left = x + this.PX;\n        if (last) {\n            grip.w = t.columns[i].w + x - grip.l;\n        }\n        if (t.opt.liveDrag) {\n            if (last) {\n                t.columns[i].style.width = grip.w + this.PX;\n                if (!t.opt.fixed && t.opt.overflow) {\n                    t.style.minWidth = (t.tableWidth + x - grip.l) + this.PX;\n                } else {\n                    t.tableWidth = Number(window.getComputedStyle(t).width.replace(/px/, '')).valueOf();\n                }\n            } else {\n                this.syncCols(t, i, false, t.opt);\n            }\n            this.syncGrips();\n            const cb = t.opt.onDrag;\n            if (cb) {\n                cb(e);\n            }\n        }\n        e.preventDefault(); //prevent text selection while dragging\n    };\n\n    /**\n     * Event handler fired when the dragging is over, updating table layout\n     * @param {UIEvent} e - grip's drag over event\n     */\n    onGripDragOver = (e) => {\n        const grip = this.grip;\n        document.removeEventListener('touchend', this.onGripDragOver);\n        document.removeEventListener('mouseup', this.onGripDragOver);\n        document.removeEventListener('touchmove', this.onGripDrag);\n        document.removeEventListener('mousemove', this.onGripDrag);\n        const last = document.querySelector('head').lastChild;\n        last.parentNode.removeChild(last);\n        if (!grip) {\n            return;\n        }\n        grip.classList.remove(grip.t.opt.draggingClass);\n        if (!(grip.x - grip.l === 0)) {\n            const t = grip.t;\n            const cb = t.opt.onResize;\n            const i = grip.i;\n            const last = i === t.columnCnt - 1;\n            if (last) {\n                const c = t.columns[i];\n                c.style.width = grip.w + this.PX;\n                c.w = grip.w;\n            } else {\n                this.syncCols(t, i, true, t.opt);\n            }\n            if (!t.opt.fixed) {\n                this.applyBounds();\n            }\n            this.syncGrips();\n            if (cb) {\n                cb(e);\n            }\n            if (t.opt.serialize) {\n                this.serializeStore();\n            }\n        }\n        this.grip = null;\n    };\n\n    /**\n     * Prepares the table set in the constructor for resizing.\n     * @param {Object} options\n     * @returns {Object} previous options object if any\n     */\n    init = (options) => {\n        if (options.disable) {\n            return this.destroy();\n        }\n        const tb = this.tb;\n        const id = tb.getAttribute(this.ID) || this.RESIZABLE + counter();\n        if (!tb.matches('table') || tb.extended && !options.partialRefresh) {\n            return null;\n        }\n        //append required CSS rules\n        const head = document.querySelector('head');\n        const css = ' .grip-resizable{table-layout:fixed;} .grip-resizable > tbody > tr > td, .grip-resizable > tbody > tr > th{overflow:hidden}'\n            + ' .grip-padding > tbody > tr > td, .grip-padding > tbody > tr > th{padding-left:0!important; padding-right:0!important;}'\n            + ' .grip-container{ height:0px; position:relative;} .grip-handle{margin-left:-5px; position:absolute; z-index:5; }'\n            + ' .grip-handle .grip-resizable{position:absolute;background-color:red;filter:alpha(opacity=1);opacity:0;width:10px;height:100%;cursor: col-resize;top:0px}'\n            + ' .grip-lastgrip{position:absolute; width:1px; } .grip-drag{ border-left:1px dotted black;\t}'\n            + ' .grip-flex{width:auto!important;} .grip-handle.grip-disabledgrip .grip-resizable{cursor:default; display:none;}';\n        this.createStyle(head, css);\n        if (options.hoverCursor && options.hoverCursor !== 'col-resize') {\n            const css = '.grip-handle .grip-resizable:hover{cursor:' + options.hoverCursor + '!important}';\n            this.createStyle(head, css);\n        }\n        tb.setAttribute(this.ID, id);\n        const oldOptions = tb.opt;\n        tb.opt = this.extendOptions(options);\n        const headers = this.getTableHeaders(tb);\n        this.extendTable(headers);\n        if (options.remoteTable && options.remoteTable.matches('table')) {\n            const remoteHeaders = this.getTableHeaders(tb.opt.remoteTable);\n            if (headers.length === remoteHeaders.length) {\n                this.extendRemoteTable(tb.opt.remoteTable, remoteHeaders, tb);\n            } else {\n                console.warn('column count for remote table did not match');\n            }\n        }\n        return oldOptions;\n    };\n\n    /**\n     * This function updates all columns width according to its real width. It must be taken into account that the\n     * sum of all columns can exceed the table width in some cases (if fixed is set to false and table has some kind\n     * of max-width).\n     */\n    applyBounds = () => {\n        const t = this.tb;\n        const w = t.columns.map(col => {\n            return window.getComputedStyle(col).width;\n        });\n        t.style.width = window.getComputedStyle(t).width;\n        t.tableWidth = Number(t.style.width.replace(/px/, '')).valueOf();\n        //prevent table width changes\n        t.classList.remove(this.FLEX);\n        t.columns.forEach((col, i) => {\n            col.style.width = w[i];\n            const width = Number(w[i].replace(/px/, '')).valueOf();\n            col.w = width;\n            t.opt.currentWidths[i] = width;\n        });\n        //allow table width changes\n        t.classList.add(this.FLEX);\n    };\n\n    /**\n     * Writes the current column widths to storage.\n     */\n    serializeStore = () => {\n        const store = this.store;\n        const t = this.tb;\n        store[t.getAttribute(this.ID)] = '';\n        let m = 0;\n        for (let i = 0; i < t.columns.length; i++) {\n            const w = window.getComputedStyle(t.columns[i]).width.replace(/px/, '');\n            store[t.getAttribute(this.ID)] += w + ';';\n            m += Number(w).valueOf();\n        }\n        //the last item of the serialized string is the table's active area (width)\n        store[t.getAttribute(this.ID)] += m.toString();\n        if (!t.opt.fixed) {\n            store[t.getAttribute(this.ID)] += ';' + window.getComputedStyle(t).width.replace(/px/, '');\n        }\n    };\n\n    /**\n     * Function that places each grip in the correct position according to the current table layout\n     */\n    syncGrips = () => {\n        const t = this.tb;\n        t.gripContainer.style.width = t.tableWidth + this.PX;\n        for (let i = 0; i < t.columnCnt; i++) {\n            const c = t.columns[i];\n            const cRect = c.getBoundingClientRect();\n            const tRect = t.getBoundingClientRect();\n            t.grips[i].style.left = cRect.left - tRect.left + c.offsetWidth + t.cellSpace / 2 + this.PX;\n            t.grips[i].style.height = (t.opt.headerOnly ? t.columns[0].offsetHeight : t.offsetHeight) + this.PX;\n        }\n    };\n\n    /**\n     * This function removes any enhancements from the table being processed.\n     * @returns {Object} current option object if any\n     */\n    destroy = () => {\n        const tt = this.tb;\n        const id = tt.getAttribute(this.ID);\n        if (!id) {\n            return null;\n        }\n        this.store[id] = '';\n        tt.classList.remove(this.RESIZABLE);\n        tt.classList.remove(this.FLEX);\n        if (tt.remote) {\n            tt.remote.classList.remove(this.RESIZABLE);\n            tt.remote.classList.remove(this.FLEX);\n        }\n        if (tt.gripContainer && tt.gripContainer.parentNode) {\n            tt.gripContainer.parentNode.removeChild(tt.gripContainer);\n        }\n        delete tt.extended;\n        return tt.opt;\n    };\n\n    /**\n     * Utility method to add a <style> to an element\n     * @param {HTMLElement} element\n     * @param {string} css\n     */\n    createStyle = (element, css) => {\n        const hash = stringHash(css).toString();\n        const oldStyle = element.querySelectorAll('style');\n        const filtered = Array.from(oldStyle).filter(style => {\n            return (style.gripid === hash);\n        });\n        if (filtered.length) {\n            return;\n        }\n        const style = document.createElement('style');\n        style.type = 'text/css';\n        style.gripid = hash;\n        if (style.styleSheet) {\n            style.styleSheet.cssText = css;\n        } else {\n            style.appendChild(document.createTextNode(css));\n        }\n        element.appendChild(style);\n    };\n\n    /**\n     * Populates unset options with defaults and sets resizeMode properties.\n     * @param {Object} options\n     * @returns {Object}\n     */\n    extendOptions = (options) => {\n        const extOptions = Object.assign({}, ColumnResizer.DEFAULTS, options);\n        extOptions.fixed = true;\n        extOptions.overflow = false;\n        switch (extOptions.resizeMode) {\n            case 'flex':\n                extOptions.fixed = false;\n                break;\n            case 'overflow':\n                extOptions.fixed = false;\n                extOptions.overflow = true;\n                break;\n        }\n        return extOptions;\n    };\n\n    /**\n     * Finds all the visible table header elements from a given table.\n     * @param {HTMLTableElement} table\n     * @returns {HTMLElement[]}\n     */\n    getTableHeaders = (table) => {\n        const id = '#' + table.id;\n        let th = Array.from(table.querySelectorAll(id + '>thead>tr:nth-of-type(1)>th'));\n        th = th.concat(Array.from(table.querySelectorAll(id + '>thead>tr:nth-of-type(1)>td')));\n        if (!th.length) {\n            th = Array.from(table.querySelectorAll(id + '>tbody>tr:nth-of-type(1)>th'));\n            th = th.concat(Array.from(table.querySelectorAll(id + '>tr:nth-of-type(1)>th')));\n            th = th.concat(Array.from(table.querySelectorAll(id + '>tbody>tr:nth-of-type(1)>td')));\n            th = th.concat(Array.from(table.querySelectorAll(id + '>tr:nth-of-type(1)>td')));\n        }\n        return this.filterInvisible(th, false);\n    };\n\n    /**\n     * Filter invisible columns.\n     * @param {HTMLElement[]} nodes\n     * @param {boolean} column\n     * @return {HTMLElement[]}\n     */\n    filterInvisible = (nodes, column) => {\n        return nodes.filter((node) => {\n            const width = column ? -1 : node.offsetWidth;\n            const height = column ? -1 : node.offsetHeight;\n            const invisible = (width === 0 && height === 0)\n                || (node.style && node.style.display && window.getComputedStyle(node).display === 'none') || false;\n            return !invisible;\n        });\n    };\n\n    /**\n     * Add properties to the table for resizing\n     * @param {HTMLTableElement} th\n     */\n    extendTable = (th) => {\n        const tb = this.tb;\n        if (tb.opt.removePadding) {\n            tb.classList.add('grip-padding');\n        }\n        tb.classList.add(this.RESIZABLE);\n        tb.insertAdjacentHTML('beforebegin', '<div class=\"grip-container\"/>');\t//class forces table rendering in fixed-layout mode to prevent column's min-width\n        tb.grips = []; // grips\n        tb.columns = []; // columns\n        tb.tableWidth = Number(window.getComputedStyle(tb).width.replace(/px/, '')).valueOf();\n        tb.gripContainer = tb.previousElementSibling;\n        if (tb.opt.marginLeft) {\n            tb.gripContainer.style.marginLeft = tb.opt.marginLeft;\n        }\n        if (tb.opt.marginRight) {\n            tb.gripContainer.style.marginRight = tb.opt.marginRight;\n        }\n        tb.cellSpace = parseInt(this.legacyIE ? tb.cellSpacing || tb.currentStyle.borderSpacing : window.getComputedStyle(tb).borderSpacing.split(' ')[0].replace(/px/, '')) || 2;\n        tb.borderSpace = parseInt(this.legacyIE ? tb.border || tb.currentStyle.borderLeftWidth : window.getComputedStyle(tb).borderLeftWidth.replace(/px/, '')) || 1;\n        tb.extended = true;\n        this.createGrips(th);\n    };\n\n    /**\n     * Add properties to the remote table for resizing\n     * @param {HTMLTableElement} tb - the remote table\n     * @param {HTMLElement[]} th - table header array\n     * @param {HTMLTableElement} controller - the controlling table\n     */\n    extendRemoteTable = (tb, th, controller) => {\n        const options = controller.opt;\n        if (options.removePadding) {\n            tb.classList.add('grip-padding');\n        }\n        tb.classList.add(this.RESIZABLE);\n        if (!tb.getAttribute(this.ID)) {\n            tb.setAttribute(this.ID, controller.getAttribute(this.ID) + 'remote');\n        }\n        tb.columns = []; // columns\n        th.forEach((header, index) => {\n            const column = th[index];\n            column.w = controller.columns[index].w;\n            column.style.width = column.w + this.PX;\n            column.removeAttribute('width');\n            tb.columns.push(column);\n        });\n        tb.tableWidth = controller.tableWidth;\n        tb.cellSpace = controller.cellSpace;\n        tb.borderSpace = controller.borderSpace;\n        const cg = Array.from(tb.querySelectorAll('col'));\n        tb.columnGrp = this.filterInvisible(cg, true);\n        tb.columnGrp.forEach( (col, index) => {\n            col.removeAttribute('width');\n            col.style.width = controller.columnGrp[index].style.width;\n        });\n        controller.remote = tb;\n    };\n\n    /**\n     * Function to create all the grips associated with the table given by parameters\n     * @param {HTMLElement[]} th - table header array\n     */\n    createGrips = (th) => {\n        const t = this.tb;\n        t.columnGrp = this.filterInvisible(Array.from(t.querySelectorAll('col')), true);\n        t.columnGrp.forEach(col => {\n            col.removeAttribute('width');\n        });\n        t.columnCnt = th.length;\n        let storage = false;\n        if (this.store[t.getAttribute(this.ID)]) {\n            this.deserializeStore(th);\n            storage = true;\n        }\n        th.forEach((header, index) => {\n            const column = th[index];\n            const dc = t.opt.disabledColumns.indexOf(index) !== -1;\n            this.createDiv(t.gripContainer, 'grip-handle');\n            const handle = t.gripContainer.lastChild;\n            if (!dc && t.opt.gripInnerHtml) { //add the visual node to be used as grip\n                handle.innerHTML = t.opt.gripInnerHtml;\n            }\n            this.createDiv(handle, this.RESIZABLE);\n            if (index === t.columnCnt - 1) {\n                handle.classList.add('grip-lastgrip');\n                if (t.opt.fixed) {\n                    // if the table resizing mode is set to fixed, the last grip is removed since table\n                    // width can not change\n                    handle.innerHTML = '';\n                }\n            }\n            handle.addEventListener('touchstart', this.onGripMouseDown, {capture: true, passive: true});\n            handle.addEventListener('mousedown', this.onGripMouseDown, true);\n\n            if (!dc) {\n                handle.classList.remove('grip-disabledgrip');\n                handle.addEventListener('touchstart', this.onGripMouseDown, {capture: true, passive: true});\n                handle.addEventListener('mousedown', this.onGripMouseDown, true);\n            } else {\n                handle.classList.add('grip-disabledgrip');\n            }\n\n            handle.t = t;\n            handle.i = index;\n            if (t.opt.widths[index]) {\n                column.w = t.opt.widths[index];\n            } else if (storage) {\n                column.w = Number(column.style.width.replace(/px/, '')).valueOf();\n            } else {\n                column.w = Number(window.getComputedStyle(column).width.replace(/px/, '')).valueOf();\n            }\n            t.opt.currentWidths[index] = column.w;\n            column.style.width = column.w + this.PX;\n            column.removeAttribute('width');\n            handle.data = {i: index, t: t.getAttribute(this.ID), last: index === t.columnCnt - 1};\n            t.grips.push(handle);\n            t.columns.push(column);\n        });\n        let ot = Array.from(t.querySelectorAll('td'));\n        ot.concat(Array.from(t.querySelectorAll('th')));\n        //the width attribute is removed from all table cells which are not nested in other tables and don't belong to the header array\n        ot = ot.filter((node) => {\n            // .not(th)\n            for (let i = 0; i < th.length; i++) {\n                if (th[i] === node) return false;\n            }\n            return true;\n        });\n        ot = ot.filter((node) => {\n            //.not('table th, table td')\n            return !(node.querySelectorAll('table th').length || node.querySelectorAll('table td').length);\n        });\n        ot.forEach(table => {\n            table.removeAttribute('width');\n        });\n        if (!t.opt.fixed) {\n            t.removeAttribute('width');\n            t.classList.add(this.FLEX);\n        }\n        this.syncGrips();\n    };\n\n    /**\n     * Get the stored table headers.\n     * @param {HTMLElement[]} th - table header array\n     */\n    deserializeStore = (th) => {\n        const t = this.tb;\n        t.columnGrp.forEach((node) => {\n            node.removeAttribute('width');\n        });\n        if (t.opt.flush) {\n            this.store[t.getAttribute(this.ID)] = '';\n            return;\n        }\n        const w = this.store[t.getAttribute(this.ID)].split(';');\n        const tw = w[t.columnCnt + 1];\n        if (!t.opt.fixed && tw) {\n            t.style.width = tw + this.PX;\n            if (t.opt.overflow) {\n                t.style.minWidth = tw + this.PX;\n                t.tableWidth = Number(tw).valueOf();\n            }\n        }\n        for (let i = 0; i < t.columnCnt; i++) {\n            th[i].style.width = w[i] + this.PX;\n            if (t.columnGrp[i]) {\n                // this code is required in order to create an inline CSS rule with higher precedence than\n                // an existing CSS class in the 'col' elements\n                t.columnGrp[i].style.width = 100 * Number(w[i]).valueOf() / Number(w[t.columnCnt]).valueOf() + '%';\n            }\n        }\n    };\n\n    /**\n     * Utility method to wrap HTML text in a <div/> and appent to an element.\n     * @param {HTMLElement} element - the HTML element to append the div to\n     * @param {string} className - class name for the new div for styling\n     * @param {string} text - inner HTML text\n     */\n    createDiv = (element, className, text) => {\n        const div = document.createElement('div');\n        div.classList.add(className);\n        if (text) {\n            div.innerHTML = text;\n        }\n        element.appendChild(div);\n    };\n\n    /**\n     * This function updates column's width according to the horizontal position increment of the grip being\n     * dragged. The function can be called while dragging if liveDragging is enabled and also from the onGripDragOver\n     * event handler to synchronize grip's position with their related columns.\n     * @param {HTMLTableElement} t - table object\n     * @param {number} i - index of the grip being dragged\n     * @param {boolean} isOver - to identify when the function is being called from the onGripDragOver event\n     * @param {Object} options - used for chaining options with remote tables\n     */\n    syncCols = (t, i, isOver, options) => {\n        const remote = t.remote;\n        const inc = this.grip.x - this.grip.l;\n        const c0 = t.columns[i];\n        const c1 = t.columns[i + 1];\n        if (!(c0 && c1)) {\n            return;\n        }\n        const w0 = c0.w + inc;\n        const w1 = c1.w - inc;\n        const sw0 = w0 + this.PX;\n        c0.style.width = sw0;\n        if (t.columnGrp[i] && t.columnGrp[i].style.width) {\n            t.columnGrp[i].style.width = sw0;\n        }\n        if (remote) {\n            remote.columns[i].style.width = sw0;\n            if (remote.columnGrp[i] && remote.columnGrp[i].style.width) {\n                remote.columnGrp[i].style.width = sw0;\n            }\n        }\n        if (options.fixed) {\n            const sw1 = w1 + this.PX;\n            c1.style.width = sw1;\n            if (t.columnGrp[i + 1] && t.columnGrp[i + 1].style.width) {\n                t.columnGrp[i + 1].style.width = sw1;\n            }\n            if (remote) {\n                remote.columns[i + 1].style.width = sw1;\n                if (remote.columnGrp[i + 1] && remote.columnGrp[i + 1].style.width) {\n                    remote.columnGrp[i + 1].style.width = sw1;\n                }\n            }\n        } else if (options.overflow) {\n            //if overflow is set, increment min-width to force overflow\n            t.style.minWidth = (t.tableWidth + inc) + this.PX;\n        }\n        if (isOver) {\n            c0.w = w0;\n            c1.w = options.fixed ? w1 : c1.w;\n            if (remote) {\n                remote.columns[i].w = w0;\n                remote.columns[i + 1].w = options.fixed ? w1 : c1.w;\n            }\n        }\n    };\n}\n\nColumnResizer.DEFAULTS = {\n    //attributes:\n    resizeMode: 'fit',              //mode can be 'fit', 'flex' or 'overflow'\n    draggingClass: 'grip-drag',\t    //css-class used when a grip is being dragged (for visual feedback purposes)\n    gripInnerHtml: '',\t\t\t\t//if it is required to use a custom grip it can be done using some custom HTML\n    liveDrag: false,\t\t\t\t//enables table-layout updating while dragging\n    minWidth: 15, \t\t\t\t\t//minimum width value in pixels allowed for a column\n    headerOnly: false,\t\t\t\t//specifies that the size of the the column resizing anchors will be bounded to the size of the first row\n    hoverCursor: 'col-resize',  \t//cursor to be used on grip hover\n    dragCursor: 'col-resize',  \t\t//cursor to be used while dragging\n    flush: false, \t\t\t\t\t//when it is required to prevent layout restoration after postback, 'flush' will remove its associated layout data\n    marginLeft: null,\t\t\t\t//e.g. '10%', '15em', '5px' ...\n    marginRight: null, \t\t\t\t//e.g. '10%', '15em', '5px' ...\n    remoteTable: null,              //other table element to resize using the main table as a controller\n    disable: false,\t\t\t\t\t//disables all the enhancements performed in a previously resized table\n    partialRefresh: false,\t\t\t//can be used when the table is inside of an updatePanel,\n    disabledColumns: [],            //column indexes to be excluded\n    removePadding: true,            //remove padding from the header cells.\n    widths: [],                     //array of initial column widths\n    currentWidths: [],              //array of the current column widths\n    serialize: true,\n\n    //events:\n    onDrag: null, \t\t\t\t\t//callback function to be fired during the column resizing process if liveDrag is enabled\n    onResize: null\t\t\t\t\t//callback function fired when the dragging process is over\n};\n"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","this","hash","str","i","length","charCodeAt","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","count","counter","ColumnResizer","tb","options","navigator","userAgent","indexOf","init","t","classList","remove","RESIZABLE","opt","fixed","tableWidth","Number","window","getComputedStyle","width","replace","valueOf","mw","columnCnt","columns","w","style","Math","round","locked","currentWidths","applyBounds","resizeMode","serialize","serializeStore","add","syncGrips","e","target","parentNode","data","g","grips","oe","touches","ox","pageX","l","offsetLeft","x","createStyle","document","querySelector","dragCursor","addEventListener","onGripDrag","onGripDragOver","draggingClass","grip","c","preventDefault","minWidth","cellSpace","borderSpace","last","min","max","Infinity","left","PX","liveDrag","overflow","syncCols","cb","onDrag","removeEventListener","lastChild","removeChild","onResize","disable","destroy","id","getAttribute","ID","matches","extended","partialRefresh","head","hoverCursor","css","setAttribute","oldOptions","extendOptions","headers","getTableHeaders","extendTable","remoteTable","remoteHeaders","extendRemoteTable","console","warn","map","col","FLEX","forEach","store","m","toString","gripContainer","cRect","getBoundingClientRect","tRect","offsetWidth","height","headerOnly","offsetHeight","tt","remote","element","stringHash","oldStyle","querySelectorAll","filtered","Array","from","filter","gripid","createElement","type","styleSheet","cssText","appendChild","createTextNode","extOptions","assign","DEFAULTS","table","th","concat","filterInvisible","nodes","column","node","display","removePadding","insertAdjacentHTML","previousElementSibling","marginLeft","marginRight","parseInt","legacyIE","cellSpacing","currentStyle","borderSpacing","split","border","borderLeftWidth","createGrips","controller","header","index","removeAttribute","push","cg","columnGrp","storage","deserializeStore","dc","disabledColumns","createDiv","handle","gripInnerHtml","innerHTML","onGripMouseDown","capture","passive","widths","ot","flush","tw","className","text","div","isOver","inc","c0","c1","w0","w1","sw0","sw1","sessionStorage","Element","msMatchesSelector"],"sourceRoot":""}